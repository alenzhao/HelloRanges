BiocInstaller::biocLite("docopt")
n
library(docopt)
"Usage: my_program.R [-hso FILE] [--quiet | --verbose] [INPUT ...]
-h --help show this
-s --sorted sorted output
-o FILE specify output file [default: ./test.txt]
--quiet print less text
--verbose print more text" -> doc
docopt(doc, "-s --quiet")
doc
docopt(doc, "-s --quiet")
exmaple("docopt")
example("docopt")
example("docopt", "-h")
docopt(doc, "-h", help=TRUE)
v <- docopt(doc, "-h", help=TRUE)
v <- docopt(doc, "-s -h", help=TRUE)
v <- docopt(doc, "-s -h")
v <- docopt(doc, "-s")
v <- docopt(doc, "-h")
v <- docopt(doc, "-s")
docopt
docopt(BEDTOOLS_INTERSECT_DOC, "-a foo.bed -b bar.bed")
docopt(BEDTOOLS_INTERSECT_DOC, "intersect -a foo.bed -b bar.bed")
docopt(BEDTOOLS_INTERSECT_DOC, "--help")
docopt(BEDTOOLS_INTERSECT_DOC, "intersect -a foo.bed -b bar.bed")
docopt(BEDTOOLS_INTERSECT_DOC, "intersect -wa -a foo.bed -b bar.bed")
docopt(BEDTOOLS_INTERSECT_DOC, "intersect -wa -a foo.bed -b bar.bed")
docopt(BEDTOOLS_INTERSECT_DOC, "intersect -a foo.bed -b bar.bed")
docopt(BEDTOOLS_INTERSECT_DOC, "intersect -a foo.bed -b bar.bed")
docopt(BEDTOOLS_INTERSECT_DOC, "intersect -a foo.bed -b bar.bed")
docopt(BEDTOOLS_INTERSECT_DOC, "intersect -a=foo.bed -b=bar.bed")
docopt(BEDTOOLS_INTERSECT_DOC, "intersect -a=foo.bed -b=bar.bed")
docopt(BEDTOOLS_INTERSECT_DOC, "intersect -a foo.bed -b bar.bed")
args(docopt)
example("docopt")
f <- file()
environment()$foo
fun <- function(x) substitute(x, list(v=2))
fun(v)
fun <- function(x) substitute(substitute(x), list(v=2))
fun(v)
fun <- function(x) substitute(x)
fun(v)
fun <- function(x) eval(call("substitute", substitute(x), list(v=2))) 
fun(v)
eval.parent
selectMethod(stack, "GenomicRangesList")
library(GenomicRanges)
selectMethod(stack, "GenomicRangesList")
selectMethod(stack, "GRangesList")
help(file)
?stdin
rtracklayer:::connectionForResource("stdin")
sys.parent
parent.frame
?list.files
Sys.glob
?Sys.glob
getwd()
Sys.glob("intersect.R")
Sys.glob("interse.R")
quote(foo) == quote(foo(a))[[1L]]
all.vars(quote(import(b)))
fun <- function() { a <- 2; substitute(a) }
fun()
fun <- function(b = 3) { a <- 2; substitute(a + b) }
fun()
fun <- function(b) { a <- 2; substitute(a + b) }
fun()
fun <- function(b) { a <- 2; substitute(a + b) }
fun(5)
fun <- function(b) { a <- 2; substitute(b) }
fun(5)
fun()
substitute(b <- b, list(b=2))
BEDFile("foo.bed")
library(rtracklayer)
BEDFile("foo.bed")
c(BEDFile("foo.bed"), "foo.bam")
as.character(c(BEDFile("foo.bed"), "foo.bam"))
 as.character(BEDFile("foo.bed"))
showMethods(path)
as.character
l <- c(BEDFile("foo.bed"), "foo.bam")
CharacterList(l)
CharacterList(l)[[1]]
as.character(l[[1]])
CharacterList
CoercerToList
IRanges:::CoercerToList
showMethods(findOverlaps)
selectMethod(findOverlaps, c("GAlignments", "GAlignments")))
selectMethod(findOverlaps, c("GAlignments", "GAlignments"))
showMethods(merge)
args(merge)
args(merge.data.frame)
gr <- GRanges("chr1", IRanges(1, 1))
gr[1] <- GRanges(".", IRanges(0, 1))
gr
seqinfo(gr)
gr <- GRanges("chr1", IRanges(1, 1))
na <- GRanges(".", IRanges(0, 1))
seqlevels(na) <- c(".", "chr1")
gr[1] <- na
gr
gr <- GRanges("chr1", IRanges(1, 1))
gr[1] <- GRanges(".", IRanges(0, 1), seqlengths(seqlengths(gr)))
gr[1] <- GRanges(".", IRanges(0, 1), seqlengths=seqlengths(gr))
gr[1] <- GRanges(".", IRanges(0, 1), seqlengths=c("."=NA, seqlengths(gr)))
gr
gr <- GRanges("chr1", IRanges(1, 1))
seqlevels(gr) <- c(".", "chr1")
gr
gr[1] <- GRanges(".", IRanges(0, 1))
pintersect(GRanges(".", IRanges(1,1)), GRanges("chr1", IRanges(1,1)))
selectMethod(pintersect, c("GRanges", "GRanges"))
selectMethod(findOverlaps, c("GRanges", "GRanges"))
GenomicRanges:::findOverlaps_GNCList
IRanges:::NCList_find_overlaps_in_groups
?unstrand
strand()
